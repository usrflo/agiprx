swagger: "2.0"
info:
  version: "1.0.0"
  title: "AgiPrx API"
  license:
    name: "GPLv3"
    url: "https://raw.githubusercontent.com/usrflo/agiprx/master/COPYING"
host: "localhost:8002"
basePath: "/"
schemes:
- "https"
- "http"
paths:
  /test/ping:
    get:
      summary: "test api availability"
      produces:
      - "text/plain"
      responses:
        "200":
          description: "successful operation"
  /test/authping:
    get:
      summary: "test api availability and user authentication"
      produces:
      - "text/plain"
      responses:
        "200":
          description: "successful operation"
        "401":
          description: "unauthorized"
      security:
      - user_auth: []
  /admin/gensynchaprx:
    get:
      summary: "generate config, reload HAProxy and synchronize the config to slave servers"
      produces:
      - "application/json"
      responses:
        "401":
          description: "unauthorized"
        "405":
          description: "Job needs to be started on master instance (this is a slave instance)"
        "423":
          description: "Job is already running"
        "500":
          description: "Unable to reload and sync of HAProxy"
        "200":
          description: "processing succeeded; warnings may be included in the response"
          schema:
            $ref: "#/definitions/ListOfWarnings"
      security:
      - user_auth: []
  /admin/writesshprx:
    get:
      summary: "generate SSH proxy config"
      produces:
      - "application/json"
      responses:
        "401":
          description: "unauthorized"
        "405":
          description: "Job needs to be started on master instance (this is a slave instance)"
        "423":
          description: "Job is already running"
        "200":
          description: "job was started as detached process; warnings may be included in the response"
          schema:
            $ref: "#/definitions/ListOfWarnings"
      security:
      - user_auth: []
  /domains/{projectLabel}:
    get:
      summary: "get configured domains inside a project"
      produces:
      - "application/json"
      parameters:
      - name: "projectLabel"
        in: "path"
        description: "label of a project"
        required: true
        type: "string"
      responses:
        "401":
          description: "unauthorized"
        "200":
          description: "list of configured project domains"
          schema:
            $ref: "#/definitions/MapOfDomains"
      security:
      - user_auth: []
  /domains/{projectLabel}/{backendLabel}:
    get:
      summary: "get configured domains inside a backend of a project"
      produces:
      - "application/json"
      parameters:
      - name: "projectLabel"
        in: "path"
        description: "label of a project"
        required: true
        type: "string"
      - name: "backendLabel"
        in: "path"
        description: "label of a project backend"
        required: true
        type: "string"
      responses:
        "401":
          description: "unauthorized"
        "200":
          description: "list of configured backend domains inside a project"
          schema:
            $ref: "#/definitions/MapOfDomains"
      security:
      - user_auth: []
  /domains/massupdate:
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Object with mass domain update definition"
        required: true
        schema:
          $ref: "#/definitions/MassDomainUpdate"
      responses:
        "401":
          description: "unauthorized"
        "500":
          description: "unable to process mass update"
        "200":
          description: "list of configured backend domains inside a project"
          schema:
            $ref: "#/definitions/ListOfWarnings"
      security:
      - user_auth: []
  /projects:
    get:
      produces:
      - "application/json"
      responses:
        "401":
          description: "unauthorized"
        "200":
          description: "list of projects the user has access to"
          schema:
            $ref: "#/definitions/ListOfProjects"
      security:
      - user_auth: []
  /projects/{projectLabel}:
    get:
      description: "fetch project details"
      produces:
      - "application/json"
      parameters:
      - name: "projectLabel"
        in: "path"
        description: "label of a project"
        required: true
        type: "string"      
      responses:
        "401":
          description: "unauthorized"
        "200":
          description: "list of project details"
          schema:
            $ref: "#/definitions/Project"
      security:
      - user_auth: []
  /containers/{projectLabel}:
    post:
      description: "create or update container in project"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectLabel"
        in: "path"
        description: "label of a project"
        required: true
        type: "string"      
      - in: "body"
        name: "body"
        description: "container to create or update"
        required: true
        schema:
          $ref: "#/definitions/Container"
      responses:
        "401":
          description: "unauthorized"
        "500":
          description: "unable to create or update container"
        "200":
          description: "containerId of created or updated container"
          schema:
            type: "object"
            properties:
              isSuccess:
                type: "boolean"
              payload:
                type: "object"
                properties:
                  key:
                    type: "string"
                  value:
                    type: "integer"
                    format: "int64"
              warnings:
                $ref: "#/definitions/ListOfWarnings"
      security:
      - user_auth: []
  /backends/{projectLabel}:
    post:
      description: "create or update backend in project"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectLabel"
        in: "path"
        description: "label of a project"
        required: true
        type: "string"      
      - in: "body"
        name: "body"
        description: "backend to create or update"
        required: true
        schema:
          $ref: "#/definitions/Backend"
      responses:
        "401":
          description: "unauthorized"
        "500":
          description: "unable to create or update backend"
        "200":
          description: "backendId of created or updated backend"
          schema:
            type: "object"
            properties:
              isSuccess:
                type: "boolean"
              payload:
                type: "object"
                properties:
                  key:
                    type: "string"
                  value:
                    type: "integer"
                    format: "int64"
              warnings:
                $ref: "#/definitions/ListOfWarnings"
      security:
      - user_auth: []
  /backends/{projectLabel}/{backendLabel}/setContainersOf/{targetBackendLabel}:
    patch:
      description: "switch backend containers of a backend to those of another backend"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectLabel"
        in: "path"
        description: "label of a project"
        required: true
        type: "string"
      - name: "backendLabel"
        in: "path"
        description: "label of a backend"
        required: true
        type: "string"
      - name: "targetBackendLabel"
        in: "path"
        description: "label of another backend whose containers should be set to the backend"
        required: true
        type: "string"
      responses:
        "401":
          description: "unauthorized"
        "500":
          description: "unable to process backend container update"
        "200":
          description: "backendId of created or updated backend"
          schema:
            type: "object"
            properties:
              isSuccess:
                type: "boolean"
              payload:
                type: "object"
                properties:
                  key:
                    type: "string"
                  value:
                    type: "integer"
                    format: "int64"
              warnings:
                $ref: "#/definitions/ListOfWarnings"
      security:
      - user_auth: []
  /maintenance/start:
    get:
      description: "Start maintenance process to check/renew SSL certificates"
      produces:
      - "application/json"
      responses:
        "401":
          description: "unauthorized"
        "423":
          description: "job is already running"
        "200":
          description: "job started in detached mode"
      security:
      - user_auth: []      

securityDefinitions:
  user_auth:
    type: "basic"

definitions:
  ListOfWarnings:
    type: "array"
    items:
      type: "string"
      
  ListOfProjects:
    type: "array"
    items:
      type: "string"

  Domain:
    type: "object"
    properties:
      domainName:
        type: "string"
      backendLabel:
        type: "string"
      letsEncrypt:
        type: "boolean"
      certProvided:
        type: "boolean"
      redirectToUrl:
        type: "string"

  BackendContainer:
    type: "object"
    properties:
      containerId:
        type: "integer"
        format: "int64"
      backendId:
        type: "integer"
        format: "int64"
      params:
        type: "string"

  Backend:
    type: "object"
    properties:
      label:
        type: "string"
      fullname:
        type: "string"
      projectId:
        type: "integer"
        format: "int64"
      port:
        type: "integer"
        format: "int32"
      params:
        type: "string"
      domainForwardings:
        type: "array"
        items:
          $ref: "#/definitions/Domain"
      backendContainers:
        type: "array"
        items:
          $ref: "#/definitions/BackendContainer"
  
  User:
    type: "object"
    properties:
      fullname:
        type: "string"
      email:
        type: "string"
      sshPublicKey:
        type: "string"
      role:
        type: "string"
      defaultPermission:
        type: "string"
      agiPrxPermission:
        type: "string"
  
  ContainerPermission:
    type: "object"
    properties:
      userId:
        type: "integer"
        format: "int64"
      user:
        $ref: "#/definitions/User"
      permission:
        type: "string"
      sshProxyUsername:
        type: "string"

  Container:
    type: "object"
    properties:
      label:
        type: "string"
      fullname:
        type: "string"
      projectId:
        type: "integer"
        format: "int64"
      hostId:
        type: "integer"
        format: "int64"
      hostname:
        type: "string"
      ipv6:
        type: "string"
      containerPermissions:
        type: "array"
        items:
          $ref: "#/definitions/ContainerPermission"

  Project:
    type: "object"
    properties:
      label:
        type: "string"
      fullname:
        type: "string"
      backends:
        type: "array"
        items:
          $ref: "#/definitions/Backend"
      containers:
        type: "array"
        items:
          $ref: "#/definitions/Container"
          
  MapOfDomains:
    type: "object"
    additionalProperties:
      $ref: "#/definitions/Domain"

  MassDomainUpdate:
    type: "object"
    properties:
      fullSync:
        description: "set to true if all domains not included in this configuration should be removed"
        type: "boolean"
      domainOperations:
        type: "array"
        items:
          type: "object"
          properties:
            operation:
              type: "string"
              description: "Hint: CREATE, UPDATE and REPLACE are synonyms; there is an update if a domain name exists, else a create"
              enum:
              - "CREATE"
              - "UPDATE"
              - "REPLACE"
              - "DELETE"
            domainName:
              type: "string"
              description: "Domain to create, update or delete"
            projectLabel:
              type: "string"
              description: "project reference; all operations need to refer to the same project"
            backendLabel:
              type: "string"
              description: "backend reference"
            enableSSL:
              description: "the server decides whether to use an existing certificate or create a new Let's Encrypt certificate"
              type: "boolean"
            redirectToUrl:
              description: "optional parameter to redirect to target URL; a trailing * keeps the path, e.g. https://foo.org/*"
              type: "string"

externalDocs:
  description: "Project README"
  url: "https://github.com/usrflo/agiprx"
